template
  require(from="./table.css")

  div.container
    div.table
      span#form-error.form-error.hidden We are having a server issue. Please try again later
      div.dm(if.one-way="state.table.owner === state.username" css="display: ${(state.table.owner === state.username) ? 'flex' : 'none'};")
        input#show-dm-battle.hidden(type="radio" name="dm-tabs" checked)
        input#show-dm-table.hidden(type="radio" name="dm-tabs")
        input#show-dm-settings.hidden(type="radio" name="dm-tabs")



        div#dm-menu
          div.name ${state.table.name}
          label#label-dm-battle.tab-label(for="show-dm-battle" click.delegate="setCurrentTab('dm-battle')") Battle
          label#label-dm-table.tab-label(for="show-dm-table" click.delegate="setCurrentTab('dm-table')") Table
          label#label-dm-settings.tab-label(for="show-dm-settings" click.delegate="setCurrentTab('dm-settings')") Settings



        div#dm-main
          div#dm-battle Battle



          form#dm-table(submit.delegate="updateTableData()")
            div.form-control
              label.cancel(for="show-dm-battle") Cancel
              input.control(type="submit" value="Save")
            div.row.single
              div.column.solo
                div.form-group.w75
                  div.title-row
                    label.title.primary(for="table-name-input") Name
                    span.error.hidden can only have letters, numbers, and spaces
                  input#table-name-input(type="text" name="table-name-input" value.one-way="storage.table.name" input.delegate="checkText({ id: 'table-name-input', type: 'input-text', keys: 'storage.table.name', localStorage: true })" focus.trigger="storeCurrentValue('table-name-input')")
            div.row.single
              div.column.solo
                div.form-group.w75
                  div.title-row
                    label.title.primary(for="table-passcode-input") Passcode
                    span.error.hidden can only have letters, numbers, and spaces
                  input#table-passcode-input(type="text" name="table-passcode-input" value.one-way="storage.table.passcode" input.delegate="checkText({ id: 'table-passcode-input', type: 'input-text', keys: 'storage.table.passcode', localStorage: true })" focus.trigger="storeCurrentValue('table-passcode-input')")
            div.row.single
              div.column.solo
                div.form-group.w75
                  div.title-row
                    label.title.primary(for="table-max-players-input") Maximum Players
                  input#table-max-players-input(type="number" name="table-max-players-input" min="2" max="12" value.one-way="storage.table.maxPlayers" input.delegate="checkNumber({ id: 'table-max-players-input', type: 'input-number', keys: 'storage.table.maxPlayers', localStorage: true })" focus.trigger="storeCurrentValue('table-max-players-input')")
            div.row.single
              div.column.solo
                div.form-group.w75
                  input#table-published-input.hidden(type="checkbox" name="table-published-input" checked.one-way="storage.table.published" change.delegate="updateState({ id: 'table-published-input', type: 'checkbox-boolean', keys: 'storage.table.published', localStorage: true })")
                  label.label-checkbox(for="table-published-input") Publish Table:



          div#dm-settings
            div.row.single
              div.column.solo
                div.form-group.w75
                  div.title-row
                    label.title.primary(for="monsters-tab-select-add") Add Monster
                  div.input-row
                    select#monsters-tab-select-add(name="monsters-tab-select-add" change.delegate="enableButton('monsters-tab-select-add')")
                      option(value="" selected) Select a monster
                      option(repeat.for="monster of state.monstersList" value="${$index}") ${monster.name} (CR ${(monster.challengeRating <= 0 || monster.challengeRating >= 1) ? monster.challengeRating : (monster.challengeRating === 0.125) ? "&frac18;" : (monster.challengeRating === 0.25) ? "&frac14;" : "&frac12;"})
                    button.add(click.delegate="tableAddRemoveMonstersCharacters({ elemID: 'monsters-tab-select-add' })" disabled) Add
            div.row.single
              div.column.solo
                div.form-group.w75
                  div.title-row
                    label.title.primary(for="monsters-tab-select-remove") Remove Monster
                  div.input-row
                    select#monsters-tab-select-remove(name="monsters-tab-select-remove" change.delegate="enableButton('monsters-tab-select-remove')")
                      option(value="" selected) Select a monster
                      option(repeat.for="monster of state.table.monstersList" value="${$index}") ${monster.name} (CR ${(monster.challengeRating <= 0 || monster.challengeRating >= 1) ? monster.challengeRating : (monster.challengeRating === 0.125) ? "&frac18;" : (monster.challengeRating === 0.25) ? "&frac14;" : "&frac12;"})
                    button.remove(click.delegate="tableAddRemoveMonstersCharacters({ elemID: 'monsters-tab-select-remove' })" disabled) Remove
            div.row.single
              div.column.solo
                div.form-group.w75
                  div.title-row
                    label.title.primary(for="characters-tab-select-remove") Remove Character
                  div.input-row
                    select#characters-tab-select-remove(name="characters-tab-select-remove" change.delegate="enableButton('characters-tab-select-remove')")
                      option(value="" selected) Select a character
                      option(repeat.for="character of state.table.charactersList" value="${$index}") ${character.name} (${character.owner})
                    button.remove(click.delegate="tableAddRemoveMonstersCharacters({ elemID: 'characters-tab-select-remove' })" disabled) Remove



      div.player(if.one-way="state.table.owner !== state.username" css="display: ${(state.table.owner !== state.username) ? 'flex' : 'none'};")
        input#show-player-battle.hidden(type="radio" name="player-tabs" checked)
        input#show-player-character.hidden(type="radio" name="player-tabs")
        input#show-player-settings.hidden(type="radio" name="player-tabs")



        div#player-menu
          div.name ${state.table.name}
          label#label-player-battle.tab-label(for="show-player-battle" click.delegate="setCurrentTab('player-battle')") Battle
          label#label-player-character.tab-label(for="show-player-character" click.delegate="setCurrentTab('player-character')") Character
          label#label-player-settings.tab-label(for="show-player-settings" click.delegate="setCurrentTab('player-settings')") Settings



        div#player-main
          div#player-battle
            div.row.triple
              div.column.left
                div.form-group
                  label.title.primary.larger(for="player-battle-hitpoints") Hitpoints
                  div.input-row
                    input#player-battle-hitpoints(type="number" name="player-battle-hitpoints" min="0" value.one-way="storage.table.hpCurr" input.delegate="checkNumber({ id: 'player-battle-hitpoints', type: 'input-number', keys: 'storage.table.hpCurr', localStorage: true })" focus.trigger="storeCurrentValue('player-battle-hitpoints')" blur.trigger="messageAction({ messageType: 'hitpointsChange', id: 'player-battle-hitpoints' })")
                    span.detail / ${state.table.charactersList[storage.table.characterIndex].hpMax}
              div.column.center
                div.form-group
                  label.title.primary.smaller(for="player-battle-savingThrowDeathSuccess")
                    | Death Saving Throws
                    br
                    |(Success)
                  div.input-row
                    input#player-battle-savingThrowDeathSuccess(type="number" name="player-battle-savingThrowDeathSuccess" min="0" max="3" value.one-way="storage.table.savingThrowDeathSuccess" input.delegate="checkNumber({ id: 'player-battle-savingThrowDeathSuccess', type: 'input-number', keys: 'storage.table.savingThrowDeathSuccess', localStorage: true })" focus.trigger="storeCurrentValue('player-battle-savingThrowDeathSuccess')" blur.trigger="messageAction({ messageType: 'deathSavingsSuccessChange', id: 'player-battle-savingThrowDeathSuccess' })")
                    span.detail / 3
              div.column.right
                div.form-group
                  label.title.primary.smaller(for="player-battle-savingThrowDeathFailure")
                    | Death Saving Throws
                    br
                    |(Failure)
                  div.input-row
                    input#player-battle-savingThrowDeathFailure(type="number" name="player-battle-savingThrowDeathFailure" min="0" max="3" value.one-way="storage.table.savingThrowDeathSuccess" input.delegate="checkNumber({ id: 'player-battle-savingThrowDeathFailure', type: 'input-number', keys: 'storage.table.savingThrowDeathSuccess', localStorage: true })" focus.trigger="storeCurrentValue('player-battle-savingThrowDeathFailure')" blur.trigger="messageAction({ messageType: 'deathSavingsFailureChange', id: 'player-battle-savingThrowDeathFailure' })")
                    span.detail / 3
            //- actionList
            div.row.single
              div.column.solo
                div.form-group.before
                  div.data-primary
                    span.colour-marker.blue
                    span.is-proficient Proficient
            div.row.triple
              div.column.left
                div.form-group
                  div.data-primary Strength Ability
                    span.colour-marker.blue(if.one-way="storage.table.savingThrowList.includes('savingThrowStrengthProficiency')")
                  div.data-secondary ${storage.table.strengthScore} (${(storage.table.strengthModifier < 0) ? '' : '+'}${storage.table.strengthModifier})
                  div.buttons
                    button.ability-check(click.delegate="messageAction({ messageType: 'abilityCheck', valueType: 'strength', value: storage.table.strengthModifier })") Check
                    button.ability-save(click.delegate="messageAction({ messageType: 'abilitySave', valueType: 'strength', value: storage.table.savingThrowStrengthBonus })") Save
              div.column.center
                div.form-group
                  div.data-primary Dexterity Ability
                    span.colour-marker.blue(if.one-way="storage.table.savingThrowList.includes('savingThrowDexterityProficiency')")
                  div.data-secondary ${storage.table.dexterityScore} (${(storage.table.dexterityModifier < 0) ? '' : '+'}${storage.table.dexterityModifier})
                  div.buttons
                    button.ability-check(click.delegate="messageAction({ messageType: 'abilityCheck', valueType: 'dexterity', value: storage.table.dexterityModifier })") Check
                    button.ability-save(click.delegate="messageAction({ messageType: 'abilitySave', valueType: 'dexterity', value: storage.table.savingThrowDexterityBonus })") Save
              div.column.right
                div.form-group
                  div.data-primary Constitution Ability
                    span.colour-marker.blue(if.one-way="storage.table.savingThrowList.includes('savingThrowConstitutionProficiency')")
                  div.data-secondary ${storage.table.constitutionScore} (${(storage.table.constitutionModifier < 0) ? '' : '+'}${storage.table.constitutionModifier})
                  div.buttons
                    button.ability-check(click.delegate="messageAction({ messageType: 'abilityCheck', valueType: 'constitution', value: storage.table.constitutionModifier })") Check
                    button.ability-save(click.delegate="messageAction({ messageType: 'abilitySave', valueType: 'constitution', value: storage.table.savingThrowConstitutionBonus })") Save
            div.row.triple
              div.column.left
                div.form-group
                  div.data-primary Intelligence Ability
                    span.colour-marker.blue(if.one-way="storage.table.savingThrowList.includes('savingThrowIntelligenceProficiency')")
                  div.data-secondary ${storage.table.intelligenceScore} (${(storage.table.intelligenceModifier < 0) ? '' : '+'}${storage.table.intelligenceModifier})
                  div.buttons
                    button.ability-check(click.delegate="messageAction({ messageType: 'abilityCheck', valueType: 'intelligence', value: storage.table.intelligenceModifier })") Check
                    button.ability-save(click.delegate="messageAction({ messageType: 'abilitySave', valueType: 'intelligence', value: storage.table.savingThrowIntelligenceBonus })") Save
              div.column.center
                div.form-group
                  div.data-primary Wisdom Ability
                    span.colour-marker.blue(if.one-way="storage.table.savingThrowList.includes('savingThrowWisdomProficiency')")
                  div.data-secondary ${storage.table.wisdomScore} (${(storage.table.wisdomModifier < 0) ? '' : '+'}${storage.table.wisdomModifier})
                  div.buttons
                    button.ability-check(click.delegate="messageAction({ messageType: 'abilityCheck', valueType: 'wisdom', value: storage.table.wisdomModifier })") Check
                    button.ability-save(click.delegate="messageAction({ messageType: 'abilitySave', valueType: 'wisdom', value: storage.table.savingThrowWisdomBonus })") Save
              div.column.right
                div.form-group
                  div.data-primary Charisma Ability
                    span.colour-marker.blue(if.one-way="storage.table.savingThrowList.includes('savingThrowCharismaProficiency')")
                  div.data-secondary ${storage.table.charismaScore} (${(storage.table.charismaModifier < 0) ? '' : '+'}${storage.table.charismaModifier})
                  div.buttons
                    button.ability-check(click.delegate="messageAction({ messageType: 'abilityCheck', valueType: 'charisma', value: storage.table.charismaModifier })") Check
                    button.ability-save(click.delegate="messageAction({ messageType: 'abilitySave', valueType: 'charisma', value: storage.table.savingThrowCharismaBonus })") Save
            div.row.single
              div.column.solo
                div.form-group.before
                  div.data-primary
                    span.colour-marker.blue
                    span.is-proficient Skilled
                    span.colour-marker.green
                    span.is-proficient Heightened
            div.row.triple
              div.column.left
                div.form-group
                  div.data-primary Athletics Skill
                    span.colour-marker.blue(if.one-way="storage.table.skillList.includes('skillAthleticsSkilled')")
                    span.colour-marker.green(if.one-way="storage.table.skillList.includes('skillAthleticsHeightened')")
                  div.data-secondary ${(storage.table.skillAthleticsModifier < 0) ? '' : '+'}${storage.table.skillAthleticsModifier}
                  div.buttons
                    button.skill-check(click.delegate="messageAction({ messageType: 'skillCheck', valueType: 'athletics', value: storage.table.skillAthleticsModifier })") Check
              div.column.center
                div.form-group
                  div.data-primary Acrobatics Skill
                    span.colour-marker.blue(if.one-way="storage.table.skillList.includes('skillAcrobaticsSkilled')")
                    span.colour-marker.green(if.one-way="storage.table.skillList.includes('skillAcrobaticsHeightened')")
                  div.data-secondary ${(storage.table.skillAcrobaticsModifier < 0) ? '' : '+'}${storage.table.skillAcrobaticsModifier}
                  div.buttons
                    button.skill-check(click.delegate="messageAction({ messageType: 'skillCheck', valueType: 'acrobatics', value: storage.table.skillAcrobaticsModifier })") Check
              div.column.right
                div.form-group
                  div.data-primary Sleight Of Hand Skill
                    span.colour-marker.blue(if.one-way="storage.table.skillList.includes('skillSleightOfHandSkilled')")
                    span.colour-marker.green(if.one-way="storage.table.skillList.includes('skillSleightOfHandHeightened')")
                  div.data-secondary ${(storage.table.skillSleightOfHandModifier < 0) ? '' : '+'}${storage.table.skillSleightOfHandModifier}
                  div.buttons
                    button.skill-check(click.delegate="messageAction({ messageType: 'skillCheck', valueType: 'sleightOfHand', value: storage.table.skillSleightOfHandModifier })") Check
            div.row.triple
              div.column.left
                div.form-group
                  div.data-primary Stealth Skill
                    span.colour-marker.blue(if.one-way="storage.table.skillList.includes('skillStealthSkilled')")
                    span.colour-marker.green(if.one-way="storage.table.skillList.includes('skillStealthHeightened')")
                  div.data-secondary ${(storage.table.skillStealthModifier < 0) ? '' : '+'}${storage.table.skillStealthModifier}
                  div.buttons
                    button.skill-check(click.delegate="messageAction({ messageType: 'skillCheck', valueType: 'stealth', value: storage.table.skillStealthModifier })") Check
              div.column.center
                div.form-group
                  div.data-primary Arcana Skill
                    span.colour-marker.blue(if.one-way="storage.table.skillList.includes('skillArcanaSkilled')")
                    span.colour-marker.green(if.one-way="storage.table.skillList.includes('skillArcanaHeightened')")
                  div.data-secondary ${(storage.table.skillArcanaModifier < 0) ? '' : '+'}${storage.table.skillArcanaModifier}
                  div.buttons
                    button.skill-check(click.delegate="messageAction({ messageType: 'skillCheck', valueType: 'arcana', value: storage.table.skillArcanaModifier })") Check
              div.column.right
                div.form-group
                  div.data-primary History Skill
                    span.colour-marker.blue(if.one-way="storage.table.skillList.includes('skillHistorySkilled')")
                    span.colour-marker.green(if.one-way="storage.table.skillList.includes('skillHistoryHeightened')")
                  div.data-secondary ${(storage.table.skillHistoryModifier < 0) ? '' : '+'}${storage.table.skillHistoryModifier}
                  div.buttons
                    button.skill-check(click.delegate="messageAction({ messageType: 'skillCheck', valueType: 'history', value: storage.table.skillHistoryModifier })") Check
            div.row.triple
              div.column.left
                div.form-group
                  div.data-primary Investigation Skill
                    span.colour-marker.blue(if.one-way="storage.table.skillList.includes('skillInvestigationSkilled')")
                    span.colour-marker.green(if.one-way="storage.table.skillList.includes('skillInvestigationHeightened')")
                  div.data-secondary ${(storage.table.skillInvestigationModifier < 0) ? '' : '+'}${storage.table.skillInvestigationModifier}
                  div.buttons
                    button.skill-check(click.delegate="messageAction({ messageType: 'skillCheck', valueType: 'investigation', value: storage.table.skillInvestigationModifier })") Check
              div.column.center
                div.form-group
                  div.data-primary Nature Skill
                    span.colour-marker.blue(if.one-way="storage.table.skillList.includes('skillNatureSkilled')")
                    span.colour-marker.green(if.one-way="storage.table.skillList.includes('skillNatureHeightened')")
                  div.data-secondary ${(storage.table.skillNatureModifier < 0) ? '' : '+'}${storage.table.skillNatureModifier}
                  div.buttons
                    button.skill-check(click.delegate="messageAction({ messageType: 'skillCheck', valueType: 'nature', value: storage.table.skillNatureModifier })") Check
              div.column.right
                div.form-group
                  div.data-primary Religion Skill
                    span.colour-marker.blue(if.one-way="storage.table.skillList.includes('skillReligionSkilled')")
                    span.colour-marker.green(if.one-way="storage.table.skillList.includes('skillReligionHeightened')")
                  div.data-secondary ${(storage.table.skillReligionModifier < 0) ? '' : '+'}${storage.table.skillReligionModifier}
                  div.buttons
                    button.skill-check(click.delegate="messageAction({ messageType: 'skillCheck', valueType: 'religion', value: storage.table.skillReligionModifier })") Check
            div.row.triple
              div.column.left
                div.form-group
                  div.data-primary Animal Handling Skill
                    span.colour-marker.blue(if.one-way="storage.table.skillList.includes('skillAnimalHandlingSkilled')")
                    span.colour-marker.green(if.one-way="storage.table.skillList.includes('skillAnimalHandlingHeightened')")
                  div.data-secondary ${(storage.table.skillAnimalHandlingModifier < 0) ? '' : '+'}${storage.table.skillAnimalHandlingModifier}
                  div.buttons
                    button.skill-check(click.delegate="messageAction({ messageType: 'skillCheck', valueType: 'animalHandling', value: storage.table.skillAnimalHandlingModifier })") Check
              div.column.center
                div.form-group
                  div.data-primary Insight Skill
                    span.colour-marker.blue(if.one-way="storage.table.skillList.includes('skillInsightSkilled')")
                    span.colour-marker.green(if.one-way="storage.table.skillList.includes('skillInsightHeightened')")
                  div.data-secondary ${(storage.table.skillInsightModifier < 0) ? '' : '+'}${storage.table.skillInsightModifier}
                  div.buttons
                    button.skill-check(click.delegate="messageAction({ messageType: 'skillCheck', valueType: 'insight', value: storage.table.skillInsightModifier })") Check
              div.column.right
                div.form-group
                  div.data-primary Medicine Skill
                    span.colour-marker.blue(if.one-way="storage.table.skillList.includes('skillMedicineSkilled')")
                    span.colour-marker.green(if.one-way="storage.table.skillList.includes('skillMedicineHeightened')")
                  div.data-secondary ${(storage.table.skillMedicineModifier < 0) ? '' : '+'}${storage.table.skillMedicineModifier}
                  div.buttons
                    button.skill-check(click.delegate="messageAction({ messageType: 'skillCheck', valueType: 'medicine', value: storage.table.skillMedicineModifier })") Check
            div.row.triple
              div.column.left
                div.form-group
                  div.data-primary Perception Skill
                    span.colour-marker.blue(if.one-way="storage.table.skillList.includes('skillPerceptionSkilled')")
                    span.colour-marker.green(if.one-way="storage.table.skillList.includes('skillPerceptionHeightened')")
                  div.data-secondary ${(storage.table.skillPerceptionModifier < 0) ? '' : '+'}${storage.table.skillPerceptionModifier}
                  div.buttons
                    button.skill-check(click.delegate="messageAction({ messageType: 'skillCheck', valueType: 'perception', value: storage.table.skillPerceptionModifier })") Check
              div.column.center
                div.form-group
                  div.data-primary Survival Skill
                    span.colour-marker.blue(if.one-way="storage.table.skillList.includes('skillSurvivalSkilled')")
                    span.colour-marker.green(if.one-way="storage.table.skillList.includes('skillSurvivalHeightened')")
                  div.data-secondary ${(storage.table.skillSurvivalModifier < 0) ? '' : '+'}${storage.table.skillSurvivalModifier}
                  div.buttons
                    button.skill-check(click.delegate="messageAction({ messageType: 'skillCheck', valueType: 'survival', value: storage.table.skillSurvivalModifier })") Check
              div.column.right
                div.form-group
                  div.data-primary Deception Skill
                    span.colour-marker.blue(if.one-way="storage.table.skillList.includes('skillDeceptionSkilled')")
                    span.colour-marker.green(if.one-way="storage.table.skillList.includes('skillDeceptionHeightened')")
                  div.data-secondary ${(storage.table.skillDeceptionModifier < 0) ? '' : '+'}${storage.table.skillDeceptionModifier}
                  div.buttons
                    button.skill-check(click.delegate="messageAction({ messageType: 'skillCheck', valueType: 'deception', value: storage.table.skillDeceptionModifier })") Check
            div.row.triple
              div.column.left
                div.form-group
                  div.data-primary Intimidation Skill
                    span.colour-marker.blue(if.one-way="storage.table.skillList.includes('skillIntimidationSkilled')")
                    span.colour-marker.green(if.one-way="storage.table.skillList.includes('skillIntimidationHeightened')")
                  div.data-secondary ${(storage.table.skillIntimidationModifier < 0) ? '' : '+'}${storage.table.skillIntimidationModifier}
                  div.buttons
                    button.skill-check(click.delegate="messageAction({ messageType: 'skillCheck', valueType: 'intimidation', value: storage.table.skillIntimidationModifier })") Check
              div.column.center
                div.form-group
                  div.data-primary Performance Skill
                    span.colour-marker.blue(if.one-way="storage.table.skillList.includes('skillPerformanceSkilled')")
                    span.colour-marker.green(if.one-way="storage.table.skillList.includes('skillPerformanceHeightened')")
                  div.data-secondary ${(storage.table.skillPerformanceModifier < 0) ? '' : '+'}${storage.table.skillPerformanceModifier}
                  div.buttons
                    button.skill-check(click.delegate="messageAction({ messageType: 'skillCheck', valueType: 'performance', value: storage.table.skillPerformanceModifier })") Check
              div.column.right
                div.form-group
                  div.data-primary Persuasion Skill
                    span.colour-marker.blue(if.one-way="storage.table.skillList.includes('skillPersuasionSkilled')")
                    span.colour-marker.green(if.one-way="storage.table.skillList.includes('skillPersuasionHeightened')")
                  div.data-secondary ${(storage.table.skillPersuasionModifier < 0) ? '' : '+'}${storage.table.skillPersuasionModifier}
                  div.buttons
                    button.skill-check(click.delegate="messageAction({ messageType: 'skillCheck', valueType: 'persuasion', value: storage.table.skillPersuasionModifier })") Check
            div.row.triple
              div.column.left
                div.form-group
                  div.data-primary Character Level
                  div.data-secondary Level ${storage.table.level}
              div.column.center
                div.form-group
                  div.data-primary Experience Points
                  div.data-secondary ${storage.table.xp}xp
              div.column.right
                div.form-group
                  div.data-primary Next Level
                  div.data-secondary ${storage.table.xpNextLevel}xp
            div.row.triple
              div.column.left
                div.form-group
                  div.data-primary Proficiency Bonus
                  div.data-secondary +${storage.table.proficiencyBonus}
              div.column.center
                div.form-group
                  div.data-primary Initiative Bonus
                  div.data-secondary ${(storage.table.initiativeBonus < 0) ? '' : '+'}${storage.table.initiativeBonus}
              div.column.right
                div.form-group
                  div.data-primary Passive Perception
                  div.data-secondary ${storage.table.passivePerception}
            div.row.triple
              div.column.left
                div.form-group
                  div.data-primary Character Race
                  div.data-secondary ${storage.table.race}
              div.column.center
                div.form-group
                  div.data-primary Character Class
                  div.data-secondary ${storage.table.class}
              div.column.right
                div.form-group
                  div.data-primary Character Alignment
                  div.data-secondary ${storage.table.alignment}
            div.row.triple
              div.column.left
                div.form-group
                  div.data-primary Character Size
                  div.data-secondary ${storage.table.size}
              div.column.center
                div.form-group
                  div.data-primary Spell/Ki Save DC
                  div.data-secondary ${storage.table.spellSaveDC}
              div.column.right
                div.form-group
                  div.data-primary Spell Attack Modifier
                  div.data-secondary ${storage.table.spellAttackModifier}
            div.row.triple
              div.column.left
                div.form-group
                  div.data-primary Armor Class
                  div.data-secondary ${storage.table.acValue}
              div.column.center
                div.form-group
                  div.data-primary AC vs melee/ranged/spells
                  div.data-secondary ${(storage.table.acValueMelee > 0) ? storage.table.acValueMelee : "-" }/${(storage.table.acValueRanged > 0) ? storage.table.acValueRanged : "-" }/${(storage.table.acValueSpells > 0) ? storage.table.acValueSpells : "-" }
              div.column.right
                div.form-group
                  div.data-primary Speed
                  div.data-secondary ${storage.table.speed} ft
            div.row.double
              div.column.left
                div.form-group
                  div.data-primary Weapon Proficiencies
                  div.data-secondary.inline-flex
                    div.line.w100(if.one-way="!storage.table.weaponProficiencyList.length") None
                    div.line.w100(if.one-way="storage.table.weaponProficiencyList.length" repeat.for="line of storage.table.weaponProficiencyList") ${line}
              div.column.right
                div.form-group
                  div.data-primary Armor Proficiencies
                  div.data-secondary.inline-flex
                    div.line.w100(if.one-way="!storage.table.armorProficiencyList.length") None
                    div.line.w100(if.one-way="storage.table.armorProficiencyList.length" repeat.for="line of storage.table.armorProficiencyList") ${line}
            div.row.double
              div.column.left
                div.form-group
                  div.data-primary Tool Proficiencies
                  div.data-secondary.inline-flex
                    div.line.w100(if.one-way="!storage.table.toolProficiencyList.length") None
                    div.line.w100(if.one-way="storage.table.toolProficiencyList.length" repeat.for="line of storage.table.toolProficiencyList") ${line}
              div.column.right
                div.form-group
                  div.data-primary Language Proficiencies
                  div.data-secondary.inline-flex
                    div.line.w100(if.one-way="!storage.table.languageProficiencyList.length") None
                    div.line.w100(if.one-way="storage.table.languageProficiencyList.length" repeat.for="line of storage.table.languageProficiencyList") ${line}
            div.row.double
              div.column.left
                div.form-group
                  div.data-primary Equipped Weapons
                  div.data-secondary.inline-flex
                    div.line.w100(if.one-way="!storage.table.equippedWeaponList.length") None
                    div.line.outer(if.one-way="storage.table.equippedWeaponList.length" repeat.for="weapon of storage.table.equippedWeaponList")
                      div.line.w100(if.one-way="weapon.hasOwnProperty('title')")
                        div.line.inner.underline Name
                        br
                        div.line.inner ${weapon.title}
                      div.line.w100(if.one-way="weapon.hasOwnProperty('description')")
                        br
                        div.line.inner.underline Description
                        br
                        div.line.inner(repeat.for="line of weapon.description") ${line}
                      div.line.w100(if.one-way="weapon.hasOwnProperty('property')")
                        br
                        div.line.inner.underline Properties
                        br
                        div.line.inner(repeat.for="line of weapon.property") ${line}
              div.column.right
                div.form-group
                  div.data-primary Equipped Accessories
                  div.data-secondary.inline-flex
                    div.line.w100(if.one-way="!storage.table.equippedAccessoryList.length") None
                    div.line.outer(if.one-way="storage.table.equippedAccessoryList.length" repeat.for="accessory of storage.table.equippedAccessoryList")
                      div.line.w100(if.one-way="accessory.hasOwnProperty('title')")
                        div.line.inner.underline Name
                        br
                        div.line.inner ${accessory.title}
                      div.line.w100(if.one-way="accessory.hasOwnProperty('description')")
                        br
                        div.line.inner.underline Description
                        br
                        div.line.inner(repeat.for="line of accessory.description") ${line}
                      div.line.w100(if.one-way="accessory.hasOwnProperty('property')")
                        br
                        div.line.inner.underline Properties
                        br
                        div.line.inner(repeat.for="line of accessory.property") ${line}
            div.row.double
              div.column.left
                div.form-group
                  div.data-primary Equipped Armor
                  div.data-secondary.inline-flex
                    div.line.w100(if.one-way="storage.table.equippedArmor === ''") None
                    div.line.w100(if.one-way="storage.table.equippedArmor.hasOwnProperty('title')")
                      div.line.inner.underline Name
                      br
                      div.line.inner ${storage.table.equippedArmor.title}
                    div.line.w100(if.one-way="storage.table.equippedArmor.hasOwnProperty('description')")
                      br
                      div.line.inner.underline Description
                      br
                      div.line.inner(repeat.for="line of storage.table.equippedArmor.description") ${line}
                    div.line.w100(if.one-way="storage.table.equippedArmor.hasOwnProperty('property')")
                      br
                      div.line.inner.underline Properties
                      br
                      div.line.inner(repeat.for="line of storage.table.equippedArmor.property") ${line}
              div.column.right
                div.form-group
                  div.data-primary Equipped Shield
                  div.data-secondary.inline-flex
                    div.line.w100(if.one-way="storage.table.equippedShield === ''") None
                    div.line.w100(if.one-way="storage.table.equippedShield.hasOwnProperty('title')")
                      div.line.inner.underline Name
                      br
                      div.line.inner ${storage.table.equippedShield.title}
                    div.line.w100(if.one-way="storage.table.equippedShield.hasOwnProperty('description')")
                      br
                      div.line.inner.underline Description
                      br
                      div.line.inner(repeat.for="line of storage.table.equippedShield.description") ${line}
                    div.line.w100(if.one-way="storage.table.equippedShield.hasOwnProperty('property')")
                      br
                      div.line.inner.underline Properties
                      br
                      div.line.inner(repeat.for="line of storage.table.equippedShield.property") ${line}
            div.row.single(if.one-way="!storage.table.itemList.length")
              div.column.solo
                div.form-group
                  div.data-primary Backpack Items
                  div.data-secondary None
            div.row.double(if.one-way="storage.table.itemList.length" repeat.for="group of storage.table.itemList")
              div.column(if.one-way="$index === 0" repeat.for="item of group" class="${($index === 0) ? 'left' : 'right'}")
                div.form-group
                  div.data-primary ${($index === 0) ? 'Backpack Items' : '&nbsp;'}
                  div.data-secondary.inline-flex
                    div.line.w100(if.one-way="item.hasOwnProperty('title')")
                      div.line.inner.underline Name
                      br
                      div.line.inner ${item.title}
                    div.line.w100(if.one-way="item.hasOwnProperty('description')")
                      br
                      div.line.inner.underline Description
                      br
                      div.line.inner(repeat.for="line of item.description") ${line}
                    div.line.w100(if.one-way="item.hasOwnProperty('property')")
                      br
                      div.line.inner.underline Properties
                      br
                      div.line.inner(repeat.for="line of item.property") ${line}
              div.column(if.one-way="$index !== 0" repeat.for="item of group" class="${($index === 0) ? 'left' : 'right'}")
                div.form-group
                  div.data-primary &nbsp;
                  div.data-secondary.inline-flex
                    div.line.w100(if.one-way="item.hasOwnProperty('title')")
                      div.line.inner.underline Name
                      br
                      div.line.inner ${item.title}
                    div.line.w100(if.one-way="item.hasOwnProperty('description')")
                      br
                      div.line.inner.underline Description
                      br
                      div.line.inner(repeat.for="line of item.description") ${line}
                    div.line.w100(if.one-way="item.hasOwnProperty('property')")
                      br
                      div.line.inner.underline Properties
                      br
                      div.line.inner(repeat.for="line of item.property") ${line}
            div.row.single
              div.column.solo
                div.form-group
                  div.data-primary Character Info
                  div.data-secondary.inline-flex
                    div.line.w50(if.one-way="!storage.table.characterInfo.length") No Character Info
                    div.line.w50(if.one-way="storage.table.characterInfo.length" repeat.for="line of storage.table.characterInfo") ${line}



          form#player-character(submit.delegate="updateCharacterInfo()")
            div.form-control
              label.cancel(for="show-player-battle") Cancel
              input.control(type="submit" value="Save")
            div.row.single
              div.column.solo
                div.form-group.w75
                  label.title.primary(for="character-xp-input") Experience Points
                  input#character-xp-input(type="number" name="character-xp-input" min="0" value.one-way="storage.table.xp" input.delegate="checkNumber({ id: 'character-xp-input', type: 'input-number', keys: 'storage.table.xp', localStorage: true })" focus.trigger="storeCurrentValue('character-xp-input')")
            div.row.single
              div.column.solo
                div.form-group.w75
                  label.title.primary Coins
                  div.input-row
                    div.row-container.w20
                      label.title.secondary(for="character-coin-copper-input") Copper
                      div.input-row
                        input#character-coin-copper-input(type="number" name="character-coin-copper-input" min="0" value.one-way="storage.table.coinCopper" input.delegate="checkNumber({ id: 'character-coin-copper-input', type: 'input-number', keys: 'storage.table.coinCopper', localStorage: true })" focus.trigger="storeCurrentValue('character-coin-copper-input')")
                    div.row-container.w20
                      label.title.secondary(for="character-coin-silver-input") Silver
                      div.input-row
                        input#character-coin-silver-input(type="number" name="character-coin-silver-input" min="0" value.one-way="storage.table.coinSilver" input.delegate="checkNumber({ id: 'character-coin-silver-input', type: 'input-number', keys: 'storage.table.coinSilver', localStorage: true })" focus.trigger="storeCurrentValue('character-coin-silver-input')")
                    div.row-container.w20
                      label.title.secondary(for="character-coin-electrum-input") Electrum
                      div.input-row
                        input#character-coin-electrum-input(type="number" name="character-coin-electrum-input" min="0" value.one-way="storage.table.coinElectrum" input.delegate="checkNumber({ id: 'character-coin-electrum-input', type: 'input-number', keys: 'storage.table.coinElectrum', localStorage: true })" focus.trigger="storeCurrentValue('character-coin-electrum-input')")
                    div.row-container.w20
                      label.title.secondary(for="character-coin-gold-input") Gold
                      div.input-row
                        input#character-coin-gold-input(type="number" name="character-coin-gold-input" min="0" value.one-way="storage.table.coinGold" input.delegate="checkNumber({ id: 'character-coin-gold-input', type: 'input-number', keys: 'storage.table.coinGold', localStorage: true })" focus.trigger="storeCurrentValue('character-coin-gold-input')")
                    div.row-container.w20
                      label.title.secondary(for="character-coin-platinum-input") Platinum
                      div.input-row
                        input#character-coin-platinum-input(type="number" name="character-coin-platinum-input" min="0" value.one-way="storage.table.coinPlatinum" input.delegate="checkNumber({ id: 'character-coin-platinum-input', type: 'input-number', keys: 'storage.table.coinPlatinum', localStorage: true })" focus.trigger="storeCurrentValue('character-coin-platinum-input')")
            div.row.single
              div.column.solo
                div.form-group.w75
                  div.title-row
                    label.title.primary(for="character-notes-input") Notes
                    span.error.hidden cannot have semicolons
                  textarea#character-notes-input(name="character-notes-input" value.one-way="storage.table.notes" input.delegate="checkTextarea({ id: 'character-notes-input', index: $index, type: 'textarea-text', keys: 'storage.table.notes', localStorage: true })" focus.trigger="storeCurrentValue('character-notes-input')" blur.trigger="blurTextarea({ id: 'character-notes-input' })")



          div#player-settings
            div.row.single
              div.column.solo
                div.form-group.w75
                  div.title-row
                    label.title.primary(for="player-resign") Resign from this table
                  div.input-row
                    select#player-resign(name="player-resign" change.delegate="enableButton('player-resign')")
                      option(value="" selected) No, I'm sticking with this group
                      option(value="${state.username}") Yes, I'd like to resign!
                    button.resign(click.delegate="tableAddRemoveMonstersCharacters({ elemID: 'player-resign' })" disabled) Resign



      div.messages
        div#message-list-empty(if.one-way="!state.table.messages.length") No Messages

        div#message-list-group(if.one-way="state.table.messages.length")
          div.message(repeat.for="message of state.table.messages")
            div.sender ${message.senderName}:
            div.line(repeat.for="line of message.text") ${line}

        div#message-input-group
          textarea#message-input(name="message-input" placeholder="Message or\n\n::calculate-start::\n[+2d4] [+4]\n::calculate-end::" value.one-way="storage.table.message" input.delegate="checkTextarea({ id: 'message-input', index: $index, type: 'textarea-text', keys: 'storage.table.message', error: 'message-error' })" focus.trigger="storeCurrentValue('message-input')" blur.trigger="blurTextarea({ id: 'message-input' })")
          select#add-statistic-item(name="add-statistic-item" value.one-way="storage.lastStatistic" change.delegate="insertStatistic('add-statistic-item')")
            option(model.one-time="''" value.one-time="''") Add statistic
            optgroup(repeat.for="group of form.table.statistics" label.one-time="group[0]")
              option(repeat.for="statistic of group[1]" model.one-time="statistic[0]" value.one-time="statistic[0]") ${statistic[1]}
          button#message-send(click.delegate="commitMessage({ elemID: 'message-input' })" disabled) Send
          span#message-error.hidden Semicolons not allowed
