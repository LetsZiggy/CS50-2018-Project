template
  require(from="./character.css")

  div.container
    form#form.character(submit.delegate="submitForm('form', 'commitCharacterChanges', '/character/update')")
      div.form-control
        span#form-error.error.hidden We are having a server issue. Please try again later
        input.control(type="submit" value="Save")



      div.row.double
        div.column.left
          div.form-group
            div.title-row
              label.title.primary(for="name") Name
              span.error.hidden can only have letters, numbers, and spaces
            input#name(type="text" name="name" value.one-way="state.character.name" input.delegate="checkText({ id: 'name', type: 'input-text', keys: 'state.character.name' })" focus.trigger="storeCurrentValue('name')")



          div.form-group
            div.title-row
              label.title.primary(for="level") Character Level
              span.modifier (+${state.character.proficiencyBonus})
            select#level(name="level" value.one-way="state.character.level" change.delegate="updateState({ id: 'level', type: 'select-number', keys: 'state.character.level' })")
              option(repeat.for="level of form.levels" model.one-time="level[0]" value.one-time="level[0]") ${level[0]}



          div.form-group
            div.title-row
              label.title.primary(for="xp") Experience Points
              span.modifier (${state.character.xpNextLevel} points to next level)
            input#xp(type="number" name="xp" min="0" value.one-way="state.character.xp" input.delegate="checkNumber({ id: 'xp', type: 'input-number', keys: 'state.character.xp' })" focus.trigger="storeCurrentValue('xp')")



          div.form-group
            label.title.primary(for="class") Character Class
            select#class(name="class" value.one-way="state.character.class" change.delegate="updateState({ id: 'class', type: 'select-text', keys: 'state.character.class' })")
              optgroup(repeat.for="group of form.classes" label.one-time="group[0]")
                option(repeat.for="class of group[1]" model.one-time="class[0]" value.one-time="class[0]") ${class[1]}



          //- div.form-group
          //-   label.title.primary(for="class") Character Class
          //-   select#class(name="class" value.one-way="state.character.class" change.delegate="updateState({ id: 'class', type: 'select-text', keys: 'state.character.class' })")
          //-     option(repeat.for="class of form.classes" model.one-time="class[0]" value.one-time="class[0]") ${class[1]}



        div.column.right
          div.form-group
            label.title.primary(for="image") Image URL
            input#image(type="text" name="image" value.one-way="state.character.image" change.delegate="updateState({ id: 'image', type: 'input-text', keys: 'state.character.image' })")
            div.item-image
              div.image(css="opacity: ${(!state.character.image) ? '0.5' : '1'}; background-size: ${(!state.character.image) ? 'auto' : 'cover'}; background-image: url(${(!state.character.image) ? 'image-icon.svg' : `${state.character.image}`});")



      div.row.single
        div.column.solo
          div.form-group
            label.title.primary(for="race") Race
            select#race(name="race" value.one-way="state.character.race" change.delegate="updateState({ id: 'race', type: 'select-text', keys: 'state.character.race' })")
              optgroup(repeat.for="group of form.races" label.one-time="group[0]")
                option(repeat.for="race of group[1]" model.one-time="race" value.one-time="race") ${race}



        div.column.solo
          div.form-group
            label.title.primary(for="size") Size
            select#size(name="size" value.one-way="state.character.size" change.delegate="updateState({ id: 'size', type: 'select-text', keys: 'state.character.size' })")
              option(repeat.for="size of form.sizes" model.one-time="size" value.one-time="size") ${size | titleCase}



        div.column.solo
          div.form-group
            label.title.primary(for="alignment") Alignment
            select#alignment(name="alignment" value.one-way="state.character.alignment" change.delegate="updateState({ id: 'alignment', type: 'select-text', keys: 'state.character.alignment' })")
              option(repeat.for="alignment of form.alignments" model.one-time="alignment" value.one-time="alignment") ${alignment}



        div.column.solo
          div.form-group
            label.title.primary(for="character-info") Character Information
            textarea#character-info(name="character-info" value.one-way="state.character.characterInfo" input.delegate="updateState({ id: 'character-info', type: 'textarea-text', keys: 'state.character.characterInfo' })")



      div.row.double
        div.column.left
          div.form-group
            label.title.primary Ability Scores
            div.repeat-group(repeat.for="ability of form.abilities | slice:0")
              div.title-row
                label.title.secondary(for="ability-${ability[0]}") ${ability[1] | titleCase}
                span.modifier (${(state.character[ability[2]] < 0) ? '' : '+'}${state.character[ability[2]]})
              input(id="ability-${ability[0]}" type="number" name="ability-${ability[0]}" min="1" max="30" value.one-way="state.character[ability[0]]" input.delegate="checkNumber({ id: `ability-${ability[0]}`, type: 'input-number', keys: `state.character.${ability[0]}` })" focus.trigger="storeCurrentValue(`ability-${ability[0]}`)")



        div.column.right
          div.form-group
            label.title.blank
            div.repeat-group(repeat.for="ability of form.abilities | slice:3")
              div.title-row
                label.title.secondary(for="ability-${ability[0]}") ${ability[1] | titleCase}
                span.modifier (${(state.character[ability[2]] < 0) ? '' : '+'}${state.character[ability[2]]})
              input(id="ability-${ability[0]}" type="number" name="ability-${ability[0]}" min="1" max="30" value.one-way="state.character[ability[0]]" input.delegate="checkNumber({ id: `ability-${ability[0]}`, type: 'input-number', keys: `state.character.${ability[0]}` })" focus.trigger="storeCurrentValue(`ability-${ability[0]}`)")



      div.row.double
        div.column.left
          div.form-group
            label.title.primary Saving Throw Proficiencies
            div.repeat-group(repeat.for="savingThrow of form.savingThrowProficiencies | slice:0")
              input.input-checkbox.hidden(id="saving-throw-has-${savingThrow[0]}" type="checkbox" name="saving-throw-has-${savingThrow[0]}" model.one-time="savingThrow[0]" checked.one-way="state.character.savingThrowList" change.delegate="showElem({ id: `saving-throw-has-${savingThrow[0]}`, type: 'checkbox-array', keys: 'state.character.savingThrowList', group: 'saving-throw', statistic: savingThrow[0] })")
              div.title-row
                label.label-checkbox(id="label-saving-throw-has-${savingThrow[0]}" for="saving-throw-has-${savingThrow[0]}") has ${savingThrow[2] | titleCase} Saving Throw Proficiency
                span.modifier(class="group-saving-throw-${savingThrow[0]} ${(state.character.savingThrowList.includes(savingThrow[0]) ? '' : 'hidden')}") (${(state.character[savingThrow[1]] < 0) ? '' : '+'}${state.character[savingThrow[1]]})



        div.column.right
          div.form-group
            label.title.blank
            div.repeat-group(repeat.for="savingThrow of form.savingThrowProficiencies | slice:3")
              input.input-checkbox.hidden(id="saving-throw-has-${savingThrow[0]}" type="checkbox" name="saving-throw-has-${savingThrow[0]}" model.one-time="savingThrow[0]" checked.one-way="state.character.savingThrowList" change.delegate="showElem({ id: `saving-throw-has-${savingThrow[0]}`, type: 'checkbox-array', keys: 'state.character.savingThrowList', group: 'saving-throw', statistic: savingThrow[0] })")
              div.title-row
                label.label-checkbox(id="label-saving-throw-has-${savingThrow[0]}" for="saving-throw-has-${savingThrow[0]}") has ${savingThrow[2] | titleCase} Saving Throw Proficiency
                span.modifier(class="group-saving-throw-${savingThrow[0]} ${(state.character.savingThrowList.includes(savingThrow[0]) ? '' : 'hidden')}") (${(state.character[savingThrow[1]] < 0) ? '' : '+'}${state.character[savingThrow[1]]})



      div.row.double
        div.column.left
          div.form-group
            label.title.primary Skills
            div.repeat-group(repeat.for="skill of form.skills | slice:0")
              input.input-radio.hidden(id="skill-has-${skill[0]}None" type="radio" name="skill-has-${skill[0]}" model.one-time="`${skill[0]}None`" matcher.bind="radioMatcher" checked.one-way="state.character.skillList" change.delegate="updateState({ id: `skill-has-${skill[0]}None`, type: 'radio-array', keys: 'state.character.skillList', statistic: skill[0] })")
              input.input-radio.hidden(id="skill-has-${skill[0]}Skilled" type="radio" name="skill-has-${skill[0]}" model.one-time="`${skill[0]}Skilled`" matcher.bind="radioMatcher" checked.one-way="state.character.skillList" change.delegate="updateState({ id: `skill-has-${skill[0]}Skilled`, type: 'radio-array', keys: 'state.character.skillList', statistic: skill[0] })")
              input.input-radio.hidden(id="skill-has-${skill[0]}Heightened" type="radio" name="skill-has-${skill[0]}Heightened" model.one-time="`${skill[0]}Heightened`" matcher.bind="radioMatcher" checked.one-way="state.character.skillList" change.delegate="updateState({ id: `skill-has-${skill[0]}Heightened`, type: 'radio-array', keys: 'state.character.skillList', statistic: skill[0] })")
              div.title-row
                label.title.secondary ${skill[1]}
                span.modifier(class="${(state.character.skillList.includes(`${skill[0]}None`)) ? 'hidden' : ''}") (${(state.character[skill[2]] < 0) ? '' : '+'}${state.character[skill[2]]})
              div.radios
                label.label-radio(id="label-skill-has-${skill[0]}None" for="skill-has-${skill[0]}None") Unskilled
                label.label-radio(id="label-skill-has-${skill[0]}Skilled" for="skill-has-${skill[0]}Skilled") Skilled
                label.label-radio(id="label-skill-has-${skill[0]}Heightened" for="skill-has-${skill[0]}Heightened") Heightened



        div.column.right
          div.form-group
            label.title.blank
            div.repeat-group(repeat.for="skill of form.skills | slice:9")
              input.input-radio.hidden(id="skill-has-${skill[0]}None" type="radio" name="skill-has-${skill[0]}" model.one-time="`${skill[0]}None`" matcher.bind="radioMatcher" checked.one-way="state.character.skillList" change.delegate="updateState({ id: `skill-has-${skill[0]}None`, type: 'radio-array', keys: 'state.character.skillList', statistic: skill[0] })")
              input.input-radio.hidden(id="skill-has-${skill[0]}Skilled" type="radio" name="skill-has-${skill[0]}" model.one-time="`${skill[0]}Skilled`" matcher.bind="radioMatcher" checked.one-way="state.character.skillList" change.delegate="updateState({ id: `skill-has-${skill[0]}Skilled`, type: 'radio-array', keys: 'state.character.skillList', statistic: skill[0] })")
              input.input-radio.hidden(id="skill-has-${skill[0]}Heightened" type="radio" name="skill-has-${skill[0]}Heightened" model.one-time="`${skill[0]}Heightened`" matcher.bind="radioMatcher" checked.one-way="state.character.skillList" change.delegate="updateState({ id: `skill-has-${skill[0]}Heightened`, type: 'radio-array', keys: 'state.character.skillList', statistic: skill[0] })")
              div.title-row
                label.title.secondary ${skill[1]}
                span.modifier(class="${(state.character.skillList.includes(`${skill[0]}None`)) ? 'hidden' : ''}") (${(state.character[skill[2]] < 0) ? '' : '+'}${state.character[skill[2]]})
              div.radios
                label.label-radio(id="label-skill-has-${skill[0]}None" for="skill-has-${skill[0]}None") Unskilled
                label.label-radio(id="label-skill-has-${skill[0]}Skilled" for="skill-has-${skill[0]}Skilled") Skilled
                label.label-radio(id="label-skill-has-${skill[0]}Heightened" for="skill-has-${skill[0]}Heightened") Heightened



      div.row.double
        div.column.left
          div.form-group
            label.title.primary(for="weapons-proficiencies") Weapon Proficiencies (multiple)
            select#weapons-proficiencies(name="weapons-proficiencies" value.one-way="state.character.weaponProficiencyList" change.delegate="updateState({ id: 'weapons-proficiencies', type: 'select-multiple', keys: 'state.character.weaponProficiencyList' })" multiple)
              optgroup(repeat.for="group of form.weaponProficiencies" label.one-time="group[0]")
                option(repeat.for="weapon of group[1]" model.one-time="weapon[0]" value.one-time="weapon[0]") ${weapon[1]}



        div.column.right
          div.form-group
            label.title.primary(for="armor-proficiencies") Armor Proficiencies (multiple)
            select#armor-proficiencies(name="armor-proficiencies" value.one-way="state.character.armorProficiencyList" change.delegate="updateState({ id: 'armor-proficiencies', type: 'select-multiple', keys: 'state.character.armorProficiencyList' })" multiple)
              optgroup(repeat.for="group of form.armorProficiencies" label.one-time="group[0]")
                option(repeat.for="armor of group[1]" model.one-time="armor[0]" value.one-time="armor[0]") ${armor[1]}



      div.row.double
        div.column.left
          div.form-group
            label.title.primary(for="tool-proficiencies") Tool Proficiencies (multiple)
            select#tool-proficiencies(name="tool-proficiencies" value.one-way="state.character.toolProficiencyList" change.delegate="updateState({ id: 'tool-proficiencies', type: 'select-multiple', keys: 'state.character.toolProficiencyList' })" multiple)
              optgroup(repeat.for="group of form.toolProficiencies" label.one-time="group[0]")
                option(repeat.for="tool of group[1]" model.one-time="tool[0]" value.one-time="tool[0]") ${tool[1]}



        div.column.right
          div.form-group
            label.title.primary(for="language-proficiencies") Language Proficiencies (multiple)
            select#language-proficiencies(name="language-proficiencies" value.one-way="state.character.languageProficiencyList" change.delegate="updateState({ id: 'language-proficiencies', type: 'select-multiple', keys: 'state.character.languageProficiencyList' })" multiple)
              optgroup(repeat.for="group of form.languageProficiencies" label.one-time="group[0]")
                option(repeat.for="language of group[1]" model.one-time="language[0]" value.one-time="language[0]") ${language[1]}



      div.row.single
        div.column.solo
          div.form-group
            div.title-row
              label.title.primary Items
              button.add(click.delegate="addTextarea({ statistic: 'itemList' })") Add Item
              button.sample(click.delegate="addSamples({ statistic: 'itemList', form: 'itemSamples', next: ['sortItems'] })") Samples
            div.add-statistic
              label.title.secondary(for="add-statistic-item") Click on textarea &gt; Select a statistic &gt; Statistic will be added at cursor's last position
              select#add-statistic-item(name="add-statistic-item" value.one-way="storage.lastStatistic" change.delegate="insertStatistic('add-statistic-item')")
                option(model.one-time="''" value.one-time="''") Add statistic
                optgroup(repeat.for="group of form.statistics" label.one-time="group[0]")
                  option(repeat.for="statistic of group[1]" model.one-time="statistic[0]" value.one-time="statistic[0]") ${statistic[1]}
            div.repeat-group(repeat.for="item of state.character.itemList")
              textarea.item(id="item-${$index}" value.one-way="item" input.delegate="checkTextarea({ id: `item-${$index}`, index: $index, type: 'textarea-array', keys: 'state.character.itemList' })" focus.trigger="storeCurrentValue(`item-${$index}`)" blur.trigger="blurTextarea({ id: `item-${$index}`, next: ['sortItems'] })")
              div.title-row
                span.error.hidden(id="error-item-${$index}") Semicolons not allowed
                button.remove(click.delegate="removeTextarea({ statistic: 'itemList', index: $index, next: ['sortItems'] })") Remove Item



      div.row.double
        div.column.left
          div.form-group
            label.title.primary(for="weapon-list") Weapons (multiple)
            label.title.secondary(if.one-way="!state.character.equipmentWeaponList.length") Add selectable weapons to Items for have equipable Weapons.
            select#weapon-list(else name="weapon-list" value.one-way="state.character.equippedWeaponList" change.delegate="updateState({ id: 'weapon-list', type: 'select-multiple', keys: 'state.character.equippedWeaponList' })" multiple)
              optgroup(repeat.for="group of state.character.equipmentWeaponList" label.one-time="group[0]")
                option(repeat.for="equipment of group[1]" model.one-time="equipment[0]" value.one-time="equipment[0]") ${equipment[0]}



        div.column.right
          div.form-group
            label.title.primary(for="accessories-list") Accessories (multiple)
            label.title.secondary(if.one-way="!state.character.equipmentAccessoryList.length") Add selectable accessories to Items for have equipable Accessories.
            select#accessories-list(else name="accessories-list" value.one-way="state.character.equippedAccessoryList" change.delegate="updateState({ id: 'accessories-list', type: 'select-multiple', keys: 'state.character.equippedAccessoryList' })" multiple)
              optgroup(repeat.for="group of state.character.equipmentAccessoryList" label.one-time="group[0]")
                option(repeat.for="equipment of group[1]" model.one-time="equipment[0]" value.one-time="equipment[0]") ${equipment[0]}



      div.row.double
        div.column.left
          div.form-group
            label.title.primary(for="armor-list") Armors
            label.title.secondary(if.one-way="!state.character.equipmentArmorList.length") Add selectable armors to Items for have equipable Armors.
            select#armor-list(else name="armor-list" value.one-way="state.character.equippedArmor" change.delegate="updateState({ id: 'armor-list', type: 'select-text', keys: 'state.character.equippedArmor' })")
              option(model.one-time="''" value.one-time="''") Select an armor
              optgroup(repeat.for="group of state.character.equipmentArmorList" label.one-time="group[0]")
                option(repeat.for="equipment of group[1]" model.one-time="equipment[0]" value.one-time="equipment[0]") ${equipment[0]}



        div.column.right
          div.form-group
            label.title.primary(for="shield-list") Shields
            label.title.secondary(if.one-way="!state.character.equipmentShieldList.length") Add selectable shields to Items for have equipable Shields.
            select#shield-list(else name="shield-list" value.one-way="state.character.equippedShield" change.delegate="updateState({ id: 'shield-list', type: 'select-text', keys: 'state.character.equippedShield' })")
              option(model.one-time="''" value.one-time="''") Select a shield
              optgroup(repeat.for="group of state.character.equipmentShieldList" label.one-time="group[0]")
                option(repeat.for="equipment of group[1]" model.one-time="equipment[0]" value.one-time="equipment[0]") ${equipment[0]}



      div.row.single
        div.column.solo
          div.form-group
            div.title-row
              label.title.primary(for="hp-max") Hit Points
              span.modifier (AC: ${state.character.acValue}${(state.character.acValueMelee !== 0) ? `, Melee AC: ${state.character.acValueMelee}` : ""}${(state.character.acValueRanged !== 0) ? `, Ranged AC: ${state.character.acValueRanged}` : ""}${(state.character.acValueSpells !== 0) ? `, Spells AC: ${state.character.acValueSpells}` : ""})
            input#hp-max(type="number" name="hp-max" min="1" value.one-way="state.character.hpMax" input.delegate="checkNumber({ id: 'hp-max', type: 'input-number', keys: 'state.character.hpMax' })" focus.trigger="storeCurrentValue('hp-max')")



        div.column.solo
          div.form-group
            label.title.primary Speed (ft)
            input#speed(type="number" name="speed" min="0" step="5" value.one-way="state.character.speed" input.delegate="checkNumber({ id: 'speed', type: 'input-number', keys: 'state.character.speed' })" focus.trigger="storeCurrentValue('speed')")



        div.column.solo
          div.form-group
            label.title.primary Coins
            div.input-row
              div.row-container
                label.title.secondary(for="coin-copper") Copper
                input#coin-copper(type="number" name="coin-copper" min="0" value.one-way="state.character.coinCopper" input.delegate="checkNumber({ id: 'coin-copper', type: 'input-number', keys: 'state.character.coinCopper' })" focus.trigger="storeCurrentValue('coin-copper')")
              div.row-container
                label.title.secondary(for="coin-silver") Silver
                input#coin-silver(type="number" name="coin-silver" min="0" value.one-way="state.character.coinSilver" input.delegate="checkNumber({ id: 'coin-silver', type: 'input-number', keys: 'state.character.coinSilver' })" focus.trigger="storeCurrentValue('coin-silver')")
              div.row-container
                label.title.secondary(for="coin-electrum") Electrum
                input#coin-electrum(type="number" name="coin-electrum" min="0" value.one-way="state.character.coinElectrum" input.delegate="checkNumber({ id: 'coin-electrum', type: 'input-number', keys: 'state.character.coinElectrum' })" focus.trigger="storeCurrentValue('coin-electrum')")
              div.row-container
                label.title.secondary(for="coin-gold") Gold
                input#coin-gold(type="number" name="coin-gold" min="0" value.one-way="state.character.coinGold" input.delegate="checkNumber({ id: 'coin-gold', type: 'input-number', keys: 'state.character.coinGold' })" focus.trigger="storeCurrentValue('coin-gold')")
              div.row-container
                label.title.secondary(for="coin-platinum") Platinum
                input#coin-platinum(type="number" name="coin-platinum" min="0" value.one-way="state.character.coinPlatinum" input.delegate="checkNumber({ id: 'coin-platinum', type: 'input-number', keys: 'state.character.coinPlatinum' })" focus.trigger="storeCurrentValue('coin-platinum')")



        div.column.solo
          div.form-group
            div.title-row
              label.title.primary Actions
              button.add(click.delegate="addTextarea({ statistic: 'actionList' })") Add Action
              button.sample(click.delegate="addSamples({ statistic: 'actionList', form: 'actionSamples' })") Samples
            div.add-statistic
              label.title.secondary(for="add-statistic-action") Click on textarea &gt; Select a statistic &gt; Statistic will be added at cursor's last position
              select#add-statistic-action(name="add-statistic-action" value.one-way="storage.lastStatistic" change.delegate="insertStatistic('add-statistic-action')")
                option(model.one-time="''" value.one-time="''") Add statistic
                optgroup(repeat.for="group of form.statistics" label.one-time="group[0]")
                  option(repeat.for="statistic of group[1]" model.one-time="statistic[0]" value.one-time="statistic[0]") ${statistic[1]}
            div.repeat-group(repeat.for="action of state.character.actionList")
              textarea.action(id="action-${$index}" value.one-way="action" input.delegate="checkTextarea({ id: `action-${$index}`, index: $index, type: 'textarea-array', keys: 'state.character.actionList' })" focus.trigger="storeCurrentValue(`action-${$index}`)" blur.trigger="blurTextarea({ id: `action-${$index}` })")
              div.title-row
                span.error.hidden(id="error-action-${$index}") Semicolons not allowed
                button.remove(click.delegate="removeTextarea({ statistic: 'actionList', index: $index })") Remove Action



        div.column.solo
          div.form-group
            label.title.primary(for="notes") Notes
            textarea#notes(name="notes" value.one-way="state.character.notes" input.delegate="updateState({ id: 'notes', type: 'textarea-text', keys: 'state.character.notes' })")
