{
	"folders": [
		{
			"path": ".",
			"name": "aureliajs",
			"folder_exclude_patterns": [".svn", ".git", ".hg", "CVS", ".swc", "node_modules", "scripts"],
			"follow_symlinks": true,
		},
	],
	"settings": {
		/* "default_encoding": "UTF-8", */
		/* "default_line_ending": "unix", */
		"detect_indentation": true,
		/* "ensure_newline_at_eof_on_save": true, */
		"show_definitions": false,
		"show_line_endings": true,
		/* "tab_size": 2, */
		/* "translate_tabs_to_spaces": false, */
		/* "trim_trailing_white_space_on_save": "all", */
		"use_tab_stops": true,
		"word_wrap": true,

		/* tailwindcss-class-sorter */
		// "tailwindcss-class-sorter": {
		// 	"format_on_save": true,
		// 	"non_tailwindcss_placement": "front",
		// 	"extensions_regex": {
		// 		"html": {
		// 			"region": "(?<=\\sappend-class-name\\.bind=\\\"')((?!'\\\").)+(?='\\\")|(?<=\\sclass-name\\.bind=\\\"')((?!'\\\").)+(?='\\\")|(?<=\\sclass=\\\")((?!\\\").)+(?=\\\")|(?<=\\sclass=')((?!').)+(?=')|(?<=@apply\\s)((?!;).)+(?=;)",
		// 			"class": "\\$\\{\\s?[^\\}]+\\s?\\}|[^\\s]+",
		// 			"conditional_split_character": "|",
		// 			"conditional_class_location": "before",
		// 		},
		// 		"css": {
		// 			"region": "(?<=@apply\\s)((?!;).)+(?=;)",
		// 			"class": "[^\\s]+",
		// 		},
		// 	},
		// 	"order_type": "recess",
		// 	"breakpoint_grouping": "style",
		// 	"edit_order": {
		// 		"overwrite": [],
		// 		"amend": [
		// 			{
		// 				"group_index": 140,
		// 				"position": "end",
		// 				"regex_list": ["fill-opacity-\\d{1,4}", "fill-rule-(nonzero|evenodd)"],
		// 			},
		// 			{
		// 				"group_index": 141,
		// 				"position": "end",
		// 				"regex_list": ["stroke-opacity-\\d{1,4}"],
		// 			},
		// 			{
		// 				"group_index": 152,
		// 				"position": "end",
		// 				"regex_list": ["animate-wiggle"],
		// 			}
		// 		],
		// 		"append": [
		// 			{
		// 				"group_index": 141,
		// 				"group_name": "dasharray",
		// 				"position": "after",
		// 				"append_order": 1,
		// 				"regex_list": ["dasharray-none"],
		// 			},
		// 			{
		// 				"group_index": 141,
		// 				"group_name": "linecap",
		// 				"position": "after",
		// 				"append_order": 2,
		// 				"regex_list": ["linecap-(butt|round|square)"],
		// 			},
		// 			{
		// 				"group_index": 141,
		// 				"group_name": "linejoin",
		// 				"position": "after",
		// 				"append_order": 3,
		// 				"regex_list": ["linejoin-(bevel|miter|round|arcs|miter-clip)"],
		// 			},
		// 			{
		// 				"group_index": 141,
		// 				"group_name": "miterlimit",
		// 				"position": "after",
		// 				"append_order": 4,
		// 				"regex_list": ["miterlimit-\\d{1,4}"],
		// 			},
		// 			{
		// 				"group_index": 141,
		// 				"group_name": "clip",
		// 				"position": "after",
		// 				"append_order": 5,
		// 				"regex_list": ["clip-rule-(nonzero|evenodd|inherit)"],
		// 			},
		// 		],
		// 	},
		// },

		/* JsPrettier */
		// "js_prettier": {
		// 	"debug": false,
		// 	"auto_format_on_save": true,
		// 	// "auto_format_on_save_excludes": [],
		// 	"auto_format_on_save_requires_prettier_config": true,
		// 	"allow_inline_formatting": true,
		// 	"additional_cli_args": {
		// 		"--config": "${project_path}/prettier.config.js",
		// 		"--config-precedence": "prefer-file",
		// 		"--ignore-path": "${project_path}/.prettierignore",
		// 	},
		// },

		/* LSP */
		"lsp_format_on_save": true,
		"lsp_code_actions_on_save": {
			"source.fixAll.eslint": true,
			"source.fixAll.json": false,
			"source.fixAll.stylelint": true,
			"source.addMissingImports.ts": false,
			"source.fixAll.ts": false,
			"source.organizeImports.ts": false,
			"source.removeUnused.ts": false,
			"source.removeUnusedImports.ts": false,
			"source.sortImports.ts": false,
			"source.fixAll.yaml": true,
		},

		"LSP": {
			/* LSP-eslint */
			"LSP-eslint": {
				"enabled": true,
				"settings": {
					"options": {
						"overrideConfigFile": "${project_path}/eslint.config.js",
					},
					"probe": ["javascript", "typescript"],
					"validate": ["javascript", "typescript"],
					"workingDirectories": [
						"${folder}",
						"${folder}/e2e",
						"${folder}/src",
						"${folder}/test",
					],
				},
				"selector": "source.js | source.ts",
			},

			/* LSP-stylelint */
			"LSP-stylelint": {
				"enabled": true,
				"settings": {
					"stylelint.configFile": "${project_path}/stylelint.config.js",
					"snippet": ["css"],
					"validate": ["css", "html"],
				},
				"selector": "source.css | source.css.tailwind",
			},

			/* LSP-tailwindcss */
			"LSP-tailwindcss": {
				"enabled": true,
				"settings": {
					"tailwindCSS.emmetCompletions": true,
					"tailwindCSS.classAttributes": [
						"class",
						"className",
						"class.bind",
						"class-name.bind",
						"append-class-name.bind",
					],
				},
				"selector": "source.css | source.css.tailwind | text.html.basic | text.html.aurelia.v1",
			},

			/* LSP-typescript */
			"LSP-typescript": {
				"enabled": true,
				"settings": {
					"javascript.format.insertSpaceAfterCommaDelimiter": false,
					"javascript.format.insertSpaceAfterConstructor": false,
					"javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": false,
					"javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": false,
					"javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": false,
					"javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,
					"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": false,
					"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,
					"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,
					"javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,
					"javascript.format.insertSpaceAfterSemicolonInForStatements": false,
					"javascript.format.insertSpaceAfterTypeAssertion": false,
					"javascript.format.insertSpaceBeforeAndAfterBinaryOperators": false,
					"javascript.format.insertSpaceBeforeFunctionParenthesis": false,
					"javascript.format.insertSpaceBeforeTypeAnnotation": false,
					"javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,
					"javascript.format.placeOpenBraceOnNewLineForFunctions": false,
					"javascript.format.semicolons": "ignore", // ignore | insert | remove
					"javascript.format.trimTrailingWhitespace": false,
					"typescript.format.insertSpaceAfterCommaDelimiter": false,
					"typescript.format.insertSpaceAfterConstructor": false,
					"typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": false,
					"typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": false,
					"typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": false,
					"typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,
					"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": false,
					"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,
					"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,
					"typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,
					"typescript.format.insertSpaceAfterSemicolonInForStatements": false,
					"typescript.format.insertSpaceAfterTypeAssertion": false,
					"typescript.format.insertSpaceBeforeAndAfterBinaryOperators": false,
					"typescript.format.insertSpaceBeforeFunctionParenthesis": false,
					"typescript.format.insertSpaceBeforeTypeAnnotation": false,
					"typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,
					"typescript.format.placeOpenBraceOnNewLineForFunctions": false,
					"typescript.format.semicolons": "ignore", // ignore | insert | remove
					"typescript.format.trimTrailingWhitespace": false,
				},
				/* https://github.com/sublimelsp/LSP-typescript/issues/118#issuecomment-1004776231 */
				"disabled_capabilities": {
					"documentFormattingProvider": true,
					"documentFormattingEditProvider": true,
					"documentRangeFormattingProvider": true,
					"documentRangeFormattingEditProvider": true,
					"documentOnTypeFormattingProvider": true,
					"documentOnTypeFormattingEditProvider": true,
				},
				"selector": "source.js | source.ts",
			},
		},

		"project_syntaxes": [
			{
				"syntax": "Aurelia/aurelia-html-v1",
				"rules": [
					{ "globmatch": "**/*.html" },
				],
			},
			{
				"syntax": "Aurelia/aurelia-javascript-v1",
				"rules": [
					{ "globmatch": "**/*.js" },
				],
			},
			{
				"syntax": "Aurelia/aurelia-typescript-v1",
				"rules": [
					{ "globmatch": "**/*.ts" },
				],
			},
			{
				"syntax": "Tailwind CSS/Tailwind CSS",
				"rules": [
					{ "globmatch": "**/*.css" },
				],
			},
		],
	},
}
